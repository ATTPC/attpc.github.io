{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AT-TPC Documentation","text":"<p>Welcome to the AT-TPC documentation site! Here we have links and references for the details about using the Active Target Time Projection Chamber and it's associated tools.</p> <p>Below are some of the popular links:</p> <ul> <li>Software Documentation</li> <li>Hardware Documentation</li> <li>Frequently Asked Questions</li> <li>Contributing to AT-TPC</li> <li>Contact the AT-TPC Group</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to this Site","text":"<p>If you have some information that you would like to add to this site, please contact the current maintainer of the site (see here). They will set up your branch to develop changes. Below are some guidelines for developing this site.</p>"},{"location":"CONTRIBUTING/#required-tools","title":"Required Tools","text":"<p>We use MkDocs and MkDocs-Material. These dependencies are outlined in the requirements.txt file. </p>"},{"location":"CONTRIBUTING/#how-to-submit-a-change","title":"How to Submit a Change","text":""},{"location":"CONTRIBUTING/#managing-your-branch","title":"Managing your branch","text":"<p>You should maintain your branch as up to date with the main branch as much as possible to minimize merge conflicts.</p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>When your change is completed, please submit a pull request and request a review from the site maintainer. If you add any dependencies, please state which ones in the pull request.</p>"},{"location":"contact/","title":"Contact the AT-TPC Group","text":""},{"location":"contributors/","title":"Contributors","text":"<p>Below are the contributors to this site, in no particular order:</p> <ul> <li>Gordon McCann (gwm17)</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This page will be built once some questions are frequently asked!</p>"},{"location":"hardware/attpc/","title":"The Active Target Time Projection Chamber","text":""},{"location":"hardware/attpc/#the-standard-trigger","title":"The Standard Trigger","text":""},{"location":"software/","title":"AT-TPC Software","text":"<p>This section provides links and references to the AT-TPC software infrastructure. This goal is to give people a friendly access point to the Official\u2122 AT-TPC supported software; there will of course be a lot of other software out there for use with the AT-TPC that is not maintained by the AT-TPC group that is worth checking out!</p> <ul> <li>Analysis Software</li> <li>Data Acquisition</li> <li>Utilities</li> </ul>"},{"location":"software/acquisition/","title":"Data Acquisition Software and Friends","text":"<p>The AT-TPC runs a hybrid GETDAQ/FRIBDAQ data acquisition. GETDAQ controls the GET electronics chain (MuTaNT/CoBo/AsAd/AGET), while the FRIBDAQ system controls the many auxiliary detectors acqusition, as well as maintains active scalars. </p> <p>Here we provide some brief descriptions and links to the data acquisition software frameworks/libraries for AT-TPC, as well as related tools.</p> <ul> <li>GETDAQ: The data acquisition library and applications used with the General Electronics for TPCs (GET). GETDAQ is used to control the MuTaNT/CoBo/AsAd/AGET electronics, as well as readout data from the electronics. GETDAQ was developed by the GET collaboration.</li> <li>FRIBDAQ/NSCLDAQ: The data acquisition library used for auxiliary detectors in the AT-TPC scheme. FRIBDAQ is a general use data acquisition library that supports many different module types. FRIBDAQ/NSCLDAQ is developed by the FRIB Data Acquisition Group.</li> <li>attpc_envoy: A Rust-based interface for the GETDAQ system. GETDAQ provides the server/client infrastructure for controlling the GET electronics, but doesn't provide a complete interface for those controls. attpc_envoy is an eframe/egui GUI with an asynchronous backend which monitors and manipulates the state of all of the independent GETDAQ systems. The repository for attpc_envoy can be found here. attpc_envoy is actively developed and used by the AT-TPC Group and collaborators.</li> <li>attpc_merger: A Rust-based event building software for AT-TPC data. The various data acquisition components of the AT-TPC generate many separate data files of incompatible formats with chunks of data from different detector components. attpc_merger takes these data files and merges the data into a unified (time-based) event structure. attpc_merger serves as a conversion step, preparing data for analysis by tools like Spyral and ATTPCROOT. The repository for attpc_merger can be found here. attpc_merger is actively developed and used by the AT-TPC Group and collaborators.</li> </ul>"},{"location":"software/analysis/","title":"Analysis Software","text":"<p>Here we provide some brief descriptions and links to the analysis software frameworks/libraries for AT-TPC data.</p> <ul> <li>Spyral: A Python analysis framework developed with performance and ease-of-use in mind. Spyral supports massively-parallel analysis and uses advanced techniques such as Just-In-Time compilation to achieve competitive performance with other frameworks on this list. Spyral is actively developed and used by the AT-TPC group and collaborators. The Spyral repository can be found here as well. Some useful Spyral tools are described in the utilities section.</li> <li>ATTPCROOT: ATTPCROOT is a ROOT-based framework to analyze data of active target detectors including the ATTPC (Active Target Time Projection Chamber) detector and the p-ATTPC (Prototype). The framework allows the end user to unpack and analyze the data, as well as perform realistic simulations based on a Virtual Monte Carlo (VMC) package. The framework needs external libraries (FairSoft and FairRoot) to be compiled and executed, which are developed by other groups and not directly supported by the AT-TPC Group. Documentation for ATTPCROOT can be found here. ATTPCROOT is actively used throughout the AT-TPC collaboration.</li> <li>attpc_engine: A Python Monte Carlo simulation framework developed alongside Spyral. attpc_engine allows for the calculation of multi-step reaction kinematics and the simulation AT-TPC detector effects over that kinematics sample. Engine data can then be given to Spyral to test the efficiency of both the detector and the analysis. The attpc_engine repository can be found here. attpc_engine is actively developed and used by the AT-TPC Group.</li> <li>Igor-Pro: A collection of extensions for the IgorPro analysis package to analyze AT-TPC data.</li> </ul>"},{"location":"software/utilities/","title":"Software Utilities","text":"<p>These are tools which are supplementary to the data acqusition and the analysis.</p> <ul> <li>spyral_notebooks This is a repository of Jupyter notebooks that can be used to examine the Spyral analysis pipeline step by step. It is useful for tuning the analysis parameters.</li> <li>attpc_polaris_template This is a template repository for using Spyral at the Polaris cluster at the Argonne Leadership Computing Facility at Argonne National Laboratory.</li> <li>spyral-utils spyral-utils is a Python package with useful tools that were originally part of Spyral, but were separated into their own package because they were so darn useful. Includes things like nuclear masses, histogramming, gating, etc. The repo can be found here.</li> <li>electron_correction A C++ application for calculating Garfield calculations of the electron drift corrections due to the electric field distortion of the Active Target Time Projection Chamber (AT-TPC). electron_correction is a cli application for generating correction files to be used in AT-TPC analysis.</li> <li>event_toolkit This repository contains utilities for handling issues with raw AT-TPC data. Currently, it contains a script for correcting mismatched event numbers between the FRIBDAQ and GETDAQ data and correcting the HDF5 files in place. But more utilities will be added as need arises!</li> </ul>"}]}